<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[拴萝卜的棍子]]></title>
  <subtitle><![CDATA[目标Web全栈式开发进发ing...]]></subtitle>
  <link href="http://leeluolee.github.io/atom.xml" rel="self"/>
  <link href="http://leeluolee.github.io"/>
  <updated>2013-11-28T04:40:24.267Z</updated>
  <id>http://leeluolee.github.io/</id>
  <author>
    <name><![CDATA[leeluolee]]></name>
    <email><![CDATA[87399126@163.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[LESS to MCSS 指南]]></title>
    <link href="http://leeluolee.github.io/2013/08/05/less-to-mcss/"/>
    <id>http://leeluolee.github.io/2013/08/05/less-to-mcss/</id>
    <published>2013-08-05T13:40:04.000Z</published>
    <updated>2013-08-06T14:00:16.000Z</updated>
    <content type="html"><![CDATA[<h2>前言</h2>
<p>虽然首页没有开始做，昨天仍决定将<a href="https://github.com/NetEaseWD/mcss">MCSS</a>从身边的基友们开始向杭研推广了，从开始做这个直到现在推广遇到最多的问题是：</p>
<blockquote>
<p><strong>不是有LESS了吗？</strong></p>
</blockquote>
<p>这个问题回答了很多遍了，但是觉得回答的都不够好，所以觉得写一篇文章解释一下。其实很多答案也都可以从基于MCSS封装的函数库<a href="https://github.com/leeluolee/mass">mass</a>中得到解答，本文针对MCSS的例子都可以在这个<a href="http://leeluolee.github.io/mcss/">Try-Page</a>中进行尝试。</p>
<a name="more"></a>


<hr>
<h2>LESS特性在MCSS中的对应</h2>
<p>首先解答下LESS的特性在MCSS中的对应，这几乎也囊括了在实际生产使用时的80%的功能(实际生产并不包含基础类库封装)</p>
<h3>1. 嵌套</h3>
<p>MCSS与LESS等其它预处理器的嵌套规则完全一致，支持<code>&amp;</code>占位符，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>.m-home{
    <span class="method">display:</span> block;
    div, ul{
        + div{
            margin-<span class="method">top:</span> <span class="number">20</span>px;
        }
        <span class="method">border:</span> <span class="number">2</span>px solid <span class="symbol">#ccc</span>;
        &gt; a{
            <span class="method">color:</span> <span class="symbol">#fff</span>;
            &:hover{
               text-<span class="method">decoration:</span> none; 
            }
            ~ span{
                <span class="method">display:</span> block;
            }
        }
    }
}
</pre></td></tr></table></figure>

<p>MCSS同时支持另一个占位符<code>%</code>，与<code>&amp;</code>类似，但它不包含顶级的选择器</p>
<p>比如有时候，我们需要在<code>.ms-form</code>的扩展类<code>.ms-form-stack</code>中修改某层节点的样式，这时我们不需要重新重复一次书写，例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>.ms-form{
    input[<span class="typedef"><span class="keyword">type</span>="text"],</span>
    input[<span class="typedef"><span class="keyword">type</span>="password"],</span>
    input[<span class="typedef"><span class="keyword">type</span>="email"],</span>
    input[<span class="typedef"><span class="keyword">type</span>="url"],</span>
    select{
      display: inline-block;
      .ms-form-stack %{
        display: block;
      }
    }
    // other ruleset
}
</pre></td></tr></table></figure>

<p><strong>outport</strong></p>
<figure class="highlight lang-css"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="text"]</span>,
<span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="password"]</span>,
<span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="email"]</span>,
<span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="url"]</span>,
<span class="tag">select</span><span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block;</span></span>
<span class="rule">}</span></span>
<span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="text"]</span>,
<span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="password"]</span>,
<span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="email"]</span>,
<span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="url"]</span>,
<span class="tag">select</span><span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value">block;</span></span>
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p><strong>另外MCSS也可以进行<code>@media</code>的条件嵌套</strong></p>
<h3>2. 变量</h3>
<p>变量是CSS Preprocessor的最基本功能，LESS的变量占用了CSS规范中的<a href="http://dev.w3.org/csswg/css-syntax/#at-rule-diagram">at-keyword</a> (例如<code>@name</code>)并以<code>:</code>作为分隔, 例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">@name</span><span class="symbol">:</span> <span class="number">10</span>px;
</pre></td></tr></table></figure>

<p>而在MCSS中，变量的声明是以为<code>dollar-name</code>(如<code>$name</code>)作为标志</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$name</span> = 10px;
</pre></td></tr></table></figure>

<p><strong>WHY?</strong></p>
<ol>
<li><p><strong>避免冲突</strong>：
LESS由于占用<code>@</code>, 达到了在词法上与css一致，成就了它看起来最像CSS的美誉，事实上从语法角度讲，LESS可以说是最不规范的，因为它占用了<code>@at-keyword</code>, 在css中@at-keyword是作为<a href="http://dev.w3.org/csswg/css-syntax/#at-rule-diagram"><code>@at-rule</code></a>开始的标志， 这就有潜在冲突的可能性，并且也不利于未来功能的扩展(mcss中所有的功能扩展都是通过自定义@atrule)</p>
</li>
<li><p><strong>赋值符扩展</strong>:
除了<code>=</code>，MCSS中有另外两种赋值符号：</p>
<ol>
<li><p><code>?=</code>: 赋值操作只在变量不存在时进行，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    <span class="variable">$effect</span>-outport = <span class="literal">true</span>;
    <span class="variable">$effect</span>-outport ?= <span class="literal">false</span>;
</pre></td></tr></table></figure>

<p>此时第二个赋值无效</p>
</li>
<li><code>^=</code>: 它可以将赋值定义在全局作用域，MCSS与LESS一样有作用域，所以有时候需要跳脱作用域限制时，这个赋值符就起作用了<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>    <span class="variable">$global</span> = 10px;
    p{
      <span class="variable">$global</span> ^= 20px;
    }
</pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<p>以上两个赋值符其实都在函数封装时会常用到。</p>
<h3>3. mixin函数</h3>
<p>LESS中的<code>mixin</code>跟<code>ruleset</code>是一致的，不过可以带上操作,例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>.<span class="keyword">size</span>(<span class="variable">@width</span>, <span class="variable">@height</span>){
  width: <span class="variable">@width</span>
}
<span class="comment">//使用时</span>
p{
  .<span class="keyword">size</span>(<span class="number">20</span>px, <span class="number">40</span>px);
}
</pre></td></tr></table></figure>

<p>而在MCSS中，函数可以达到同样效果。首先了解下MCSS中函数的书写方式，与LESS的mixin一样，一个函数可以有参数，也可以没有，同时在MCSS中，函数是一种值类型，同样可以通过赋值操作进行定义，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>// 带参数
<span class="char">$s</span>ize = (<span class="char">$w</span>idth, <span class="char">$h</span>eight){
    <span class="char">$h</span>eight ?= <span class="char">$w</span>idth; // ?= 操作符的作用场景一
    <span class="method">height:</span> <span class="char">$h</span>eight; 
    <span class="method">width:</span> <span class="char">$w</span>idth; 
}
// 不带参数
<span class="char">$c</span>learfix = {
    *<span class="method">zoom:</span> <span class="number">1</span>;
    &:before, &:after {
        <span class="method">display:</span> table;
        <span class="method">content:</span> <span class="comment">""</span>;
        line-<span class="method">height:</span> <span class="number">0</span>; 
    }
    &:after {
        <span class="method">clear:</span> both; 
    }
}
</pre></td></tr></table></figure>

<p>使用时候，你可以用类似的括号来调用，也可以用所谓的<code>隐式调用</code>, 比如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>body{
    <span class="variable">$clearfix</span>(); <span class="regexp">//</span>正常调用
    <span class="variable">$size</span><span class="symbol">:</span> <span class="number">5</span>px;  <span class="regexp">//</span>设置宽高的隐式调用
}
</pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="tag">body</span><span class="rules">{
  <span class="rule">*<span class="attribute">zoom</span>:<span class="value"><span class="number">1</span>;</span></span>
  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">5</span>px;</span></span>
  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">5</span>px;</span></span>
<span class="rule">}</span></span>
<span class="tag">body</span><span class="pseudo">:before</span>,<span class="tag">body</span><span class="pseudo">:after</span><span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value">table;</span></span>
  <span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">""</span>;</span></span>
  <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">0</span>;</span></span>
<span class="rule">}</span></span>
<span class="tag">body</span><span class="pseudo">:after</span><span class="rules">{
  <span class="rule"><span class="attribute">clear</span>:<span class="value">both;</span></span>
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p><strong>需要注意的是，MCSS中的函数是一种真正的值类型，它可以被传递进函数，也可以被函数返回(或用<code>^=</code>操作符定义在全局)，并保留作用域——所谓闭包</strong>，这不仅仅是个语法糖，使得MCSS拥有其它预处理器没有封装能力！。比较近的例子可以查看MCSS的官方函数库<a href="https://github.com/leeluolee/mass#effect">mass的effect.mcss</a>，利用它，你可以封装出类似<code>$swing</code>的函数，并且可以传入参数进行效果调整。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">@import</span> <span class="string">'https://rawgithub.com/leeluolee/mass/master/mass/effect.mcss'</span>;

<span class="variable">$swing</span>(<span class="number">24</span>deg);
</pre></td></tr></table></figure>

<p><strong>Outport</strong></p>
<figure class="highlight lang-css"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
</pre></td><td class="code"><pre><span class="tag">body</span><span class="rules">{
  <span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value">hidden;</span></span>
<span class="rule">}</span></span>
<span class="class">.animated</span><span class="rules">{
  <span class="rule"><span class="attribute">-webkit-animation-duration</span>:<span class="value"><span class="number">1</span>s;</span></span>
  <span class="rule"><span class="attribute">-moz-animation-duration</span>:<span class="value"><span class="number">1</span>s;</span></span>
  <span class="rule"><span class="attribute">animation-duration</span>:<span class="value"><span class="number">1</span>s;</span></span>
  <span class="rule"><span class="attribute">-webkit-animation-fill-mode</span>:<span class="value">both;</span></span>
  <span class="rule"><span class="attribute">-moz-animation-fill-mode</span>:<span class="value">both;</span></span>
  <span class="rule"><span class="attribute">animation-fill-mode</span>:<span class="value">both;</span></span>
<span class="rule">}</span></span>
<span class="at_rule">@-webkit-keyframes swing</span>{
  20%,40%,60%,80%,100%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value">top center;</span></span>
  <span class="rule">}</span></span>
  20%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate(<span class="number">24</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  40%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate(-<span class="number">16</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  60%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate(<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  80%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate(-<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  100%<span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate(<span class="number">0</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
}
<span class="at_rule">@-moz-keyframes swing</span>{
  20%<span class="rules">{
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate(<span class="number">24</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  40%<span class="rules">{
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate(-<span class="number">16</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  60%<span class="rules">{
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate(<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  80%<span class="rules">{
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate(-<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  100%<span class="rules">{
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate(<span class="number">0</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
}
<span class="at_rule">@-o-keyframes swing</span>{
  20%<span class="rules">{
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate(<span class="number">24</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
    -<span class="tag">o</span>-<span class="tag">transform</span><span class="pseudo">:rotate(-16deg)</span>;
  }
  60%<span class="rules">{
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate(<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  80%<span class="rules">{
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate(-<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  100%<span class="rules">{
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate(<span class="number">0</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
}
<span class="at_rule">@keyframes swing</span>{
  20%<span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate(<span class="number">24</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  40%<span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate(-<span class="number">16</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  60%<span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate(<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  80%<span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate(-<span class="number">8</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
  100%<span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate(<span class="number">0</span>deg)</span>;</span></span>
  <span class="rule">}</span></span>
}
<span class="class">.animated</span><span class="class">.swing</span><span class="rules">{
  <span class="rule"><span class="attribute">-webkit-animation-name</span>:<span class="value">swing;</span></span>
  <span class="rule"><span class="attribute">-moz-animation-name</span>:<span class="value">swing;</span></span>
  <span class="rule"><span class="attribute">animation-name</span>:<span class="value">swing;</span></span>
  <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value">top center;</span></span>
  <span class="rule"><span class="attribute">-moz-transform-origin</span>:<span class="value">top center;</span></span>
  <span class="rule"><span class="attribute">-ms-transform-origin</span>:<span class="value">top center;</span></span>
  <span class="rule"><span class="attribute">-o-transform-origin</span>:<span class="value">top center;</span></span>
  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value">top center;</span></span>
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>这个不仅仅是LESS，是所有其它预处理器没有的能力！</p>
<h3>4. 颜色函数</h3>
<p>mcss支持hsl以及hsla的色值格式，最终会被输出为rgba或者<code>#ccc</code></p>
<p>与LESS不同的是，MCSS不提供类似<code>lighten</code>等动词的函数，统一为rgb概念中的red、green、 blue 和 hsl概念中 的hue、saturation、lightness 以及alpha 这7个通道的调节，函数名分别为<code>r-adjust</code>,<code>g-adjust</code>,<code>b-adjust</code>,<code>h-adjust</code>,<code>s-adjust</code>,<code>l-adjust</code>,<code>a-adjust</code> 全部支持相对和绝对调节</p>
<p>比如LESS中<code>lighten</code>、<code>darken</code>其实就是lightness的相对调节</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">@color1</span><span class="symbol">:</span> lighten(<span class="comment">#ccc, 10%);</span>
<span class="variable">@color2</span><span class="symbol">:</span> darken(<span class="comment">#ccc, 10%);</span>
</pre></td></tr></table></figure>

<p>在MCSS其实就是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$color1</span> = l-adjust(#ccc, <span class="number">10</span><span class="variable">%)</span>; <span class="comment">//往亮调</span>
<span class="variable">$color2</span> = l-adjust(#ccc, -<span class="number">10</span><span class="variable">%)</span>; <span class="comment">// 往暗调节</span>
</pre></td></tr></table></figure>

<p>所以MCSS的色值函数需要你对hsl颜色格式有一定的了解(前端开发应该这是必备的基础概念吧)</p>
<h3>5. 操作符</h3>
<p>MCSS支持所有LESS的操作符(或者说其实MCSS支持JS中的二元以及以下的所有操作符，并且优先级与JS完全一致)</p>
<h2>一些LESS所欠缺的能力</h2>
<h3>1.逻辑控制<code>@for</code>、<code>@if、@elseif、@else</code></h3>
<p>由于LESS占用了<code>@at-keyword</code>，所以很难提供类似的语言功能。LESS提供一个在选择器上的扩展<code>when</code>但是能力仍然有限。</p>
<h3>2.<code>@extend</code></h3>
<p>mixin函数可以帮助我们实现代码片的复用，但是有个巨大的问题就是，mixin会让代码变得庞大(可以看看基于less的bootstrap的重复样式)，当有明显的派生关系时，我们可以使用<code>@extend</code>，<code>@extend</code>是一个源于SASS的概念，它会将派生类的选择器添加到基础类之后。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>.u-ipt {
  padding: <span class="number">5</span>px <span class="number">10</span>px;
  box-shadow: inset <span class="number">1</span>px <span class="number">1</span>px <span class="number">3</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);
}

.m-form{
    input[<span class="typedef"><span class="keyword">type</span>="text"],</span>
    input[<span class="typedef"><span class="keyword">type</span>="password"]<span class="container">{
      @<span class="title">extend</span> .<span class="title">u</span>-<span class="title">ipt</span>;
    }</span></span>
}
</pre></td></tr></table></figure>

<p><strong>Outport</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="preprocessor">.u</span>-ipt,
<span class="preprocessor">.m</span>-form input[type=<span class="string">"text"</span>],
<span class="preprocessor">.m</span>-form input[type=<span class="string">"password"</span>]
  padding:<span class="number">5</span>px <span class="number">10</span>px<span class="comment">;</span>
  box-shadow:inset <span class="number">1</span>px <span class="number">1</span>px <span class="number">3</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<p>没有参数的<code>mixin</code>其实都可以用<code>@extend</code>来实现(但<code>@extend</code>一般用在有明显派生关系的ruleset)，MCSS支持多重<code>@extend</code>以及嵌套<code>@extend</code>，具体请查看MCSS主页</p>
<h3>3.<code>@abstract</code></h3>
<p>由于组件封装时，我们无法知道后续是否需要某个ruleset，<code>@abstract</code>这个@atrule的作用是，将一个或多个ruleset标记为不输出，但是仍然可以被派生。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">//标记一个ruleset</span>
@<span class="keyword">abstract</span> btn{
  left: <span class="number">10</span>px
}
<span class="comment">//标记一整个块</span>
@<span class="keyword">abstract</span> {
  .btn{
  }
  .fbtn{
  }
}
</pre></td></tr></table></figure>

<p>你也可以抽象一整个文件, 它是<code>@import</code> 的抽象版</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>@<span class="keyword">abstract</span> <span class="string">'ui.mcss'</span>;
</pre></td></tr></table></figure>

<p>比如在团队开发时，<code>ui.mcss</code>已经被公有样式<code>base.mcss</code> import了(即会被所有页面所共用)，但是后续的页面中仍然需要使用ui.mcss的变量、函数或者ruleset，此时<code>@abstract出现了</code>;</p>
<p><strong>ui.mcss</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// btn的mixin函数</span>
<span class="variable">$btn</span> = {
  padding: <span class="number">10</span>px
}

<span class="comment">// ui中的ruleset </span>
.u-btn{
  
}
</pre></td></tr></table></figure>

<p><strong>base.mcss</strong> </p>
<p>使用<code>@import</code> 会引入<code>ui.mcss</code>中的样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> ui.mcss
</pre></td></tr></table></figure>

<p><strong>page1.mcss</strong> </p>
<p>使用<code>@absctract</code>，你不会引入任何样式， <strong>但是你仍然可以使用文件中的变量、函数和派生<code>ui.mcss</code>中的ruleset</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="variable">@abstract</span> <span class="string">'ui.mcss'</span>;

.u-btn-<span class="number">2</span>{
  <span class="variable">@extend</span> .u-btn; <span class="regexp">//</span> 仍然可以<span class="variable">@extend</span>
  <span class="variable">$btn</span>();         <span class="regexp">//</span> 仍然可以使用变量、函数
}
</pre></td></tr></table></figure>

<p>这样可以解决团队开发中的问题。一套代码完全取决于<code>@import</code>、<code>@abstract</code>和<code>@media</code>三者的调用会有不同的表现。</p>
<h3>4.更好的出错信息以及sourcemap</h3>
<p>在出现语法错误时，MCSS会给你更精确的信息</p>
<p><img src="https://github-camo.global.ssl.fastly.net/9b3c4a1accf639b9dffbc877275e3e6cca9360c7/687474703a2f2f6c65656c756f6c65652e6769746875622e696f2f6d6373732f696d672f6572726f722e706e67" alt="error图"></p>
<p>同时sourcemap v3格式开始被chrome的developer tool的支持，MCSS也支持(需开启MCSS sourcemap选项，并在chrome的开发者工具的实验特性)</p>
<p><img src="https://github-camo.global.ssl.fastly.net/8933d6c727f1461fbab5592eb48e0e3d778d324c/687474703a2f2f6c65656c756f6c65652e6769746875622e696f2f6d6373732f696d672f736d2e706e67" alt="sourcemap"></p>
<h3>5. MCSS命令行工具</h3>
<p>相对于其他预处理器MCSS的命令行工具参数很简单，并且提供了代码的多种输出格式，以及自动编译的功能，基本上你已经无需其它工具的支持。具体请<code>npm install -g mcss</code> 并且<code>mcss -h</code> 一下</p>
<hr>
<h2>结尾感言</h2>
<p>LESS的成功来源于它的<code>简单</code>，成功的阐述了<code>82法则</code>，同时也起到了普及CSS预处理器的作用，事实上接触并且熟悉了LESS的那些概念之后，接受MCSS或者SCSS都是比较轻松的事情。</p>
<p>如果觉得LESS无法满足你的需求时</p>
<blockquote>
<p><strong>npm install -g mcss</strong> 尝试一下吧！</p>
</blockquote>
<p><em>同时MCSS是个易用的CSS Parser哦</em></p>
<p><br/></p>
]]></content>
    <category scheme="http://leeluolee.github.io/tags/mcss/" term="mcss"/>
    <category scheme="http://leeluolee.github.io/tags/css/" term="css"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[CSS预处理器初识]]></title>
    <link href="http://leeluolee.github.io/2013/08/01/mcss-start/"/>
    <id>http://leeluolee.github.io/2013/08/01/mcss-start/</id>
    <published>2013-08-01T14:49:03.000Z</published>
    <updated>2013-09-10T07:32:22.000Z</updated>
    <content type="html"><![CDATA[<h2>前言</h2>
<p>这些年，从淘宝的工程师翻译LESS首页以及bootstrap带动的LESS热波及到了国内，预处理器开始渐渐被一些工程师所接受。 <a href="http://www.w3cplus.com/sassguide/comments.html">@w3cplus</a> 最近也开了一个预处理器专版,主要是针对SASS，版面不错(相较于SASS主页)。同时豆瓣也利用stylus封装了一个简单css framework, 目前三款预处理器算是都有了一定的受众(当然90%应该都是LESS用户)。</p>
<p>此文会简单进行对预处理器的介绍并进行几款预处理器的简单对比(主要是加入了MCSS,类似的对比文是在太多了)。</p>
<a name="more"></a>

<hr>
<h2>CSS的不足 —— 抽象能力</h2>
<p>CSS是一个近乎完美且富有表现力的语言（抛开永无止境的标准化进程不谈）, 但是仍有很多开发者诟病它的不足，总结下大概有以下几点</p>
<ol>
<li>难以维护</li>
<li>无有效做到DRY(Dont repeat yourself)</li>
<li>难以真正将既有经验积淀成实际的代码</li>
<li>缺乏逻辑控制的能力</li>
<li>..............</li>
</ol>
<p>这以上其实都可以归结为 <strong>抽象能力</strong> 的不足，这个所谓的抽象能力似乎听起来本身就很抽象。我们可以在维基对它的词条上一窥究竟: </p>
<blockquote>
<p>Abstraction tries to reduce and factor out details so that the programmer can focus on a few concepts at a time.</p>
</blockquote>
<p>是的， <strong>抽离细节，关注更少</strong> 这种抽离无所谓大小， 事实上我们在编程中充斥不断的抽象提取的过程: 小到一个变量参数、一个函数， 大到一个类、模块和基于以上的架构模式。</p>
<p>并不仅限于普通编程语言，CSS也有其抽象能力，那就它的名字的含义—— <strong>层叠样式</strong> ，具体到实际开发时，我们做的有可能是定义一个类名，进行增量的功能添加。这几乎也是CSS仅有的抽象能力，也很容易引起滥用，比如设置一个<code>display:none</code>样式的类，然后一个个添加到html中，这其实是应该尽量避免的，过分依赖会导致效率低效和难以维护。</p>
<p>以编程语言的眼光来看，CSS确实抽象能力不足，它也在不断发展（从几套css variable的草案进化就可以一窥端倪）来改善这个问题。但是它实际上并不是一般意义上的编程语言，它有其自身的切实关注点。 这时CSS Preprocessor来解围了。</p>
<h2>初识CSS预处理器</h2>
<p>我们先首先来回顾下CSS预处理这个领域的发展。再来看看它们帮我们解决了什么问题。</p>
<h3>预处理的&#39;悠久&#39;历史</h3>
<p>最原始的CSS预处理器的形式可以追溯到利用服务器端模板语言(如php)通过字符插值拼接输出css，最后慢慢演变为类似SASS的css预处理语言, 不过当时的预处理器偏重语言特性多一点, 与CSS的语法偏离较大(可以参考SASS的语法)。 </p>
<p>之后LESS出现, LESS基于CSS语法的超集，带来的好处有很多，这个特性也被Sass社区所接纳。 随着SASS的另一个壳SCSS的产生，CSS-Preprocessor开始统一向着正确轨道靠拢——即基于CSS语法</p>
<p>而11年出现的TJ大神的Stylus似乎要将社区带回最初SASS的位置(虽然它仍然可以支持原生css的写法), 依赖缩进和约定去除多余的符号(比如<code>;</code>、<code>:</code>、<code>{</code>);</p>
<p>下一节我会仔细探讨下当前市面上的各个预处理</p>
<h2>市面上的CSS预处理们</h2>
<p>SASS、LESS、Stylus是非常优秀的开源产品, 每一个的产生都推动的社区的前进, 作为一个后来者，MCSS也是广泛参考Sass、Less社区讨论的衍生产物。MCSS也希望自己的理念可以解决前辈们没有解决或未关注到的问题。</p>
<h3>1. <a href="http://sass-lang.com/">SASS</a> —— 最鲁棒和冗杂的预处理器鼻祖</h3>
<p>SASS早在07年就有雏形产生，伴随着Rails社区不断发展壮大，到目前为止，仍然在CSS预处理器占有度中占据着半壁江山。google甚至直接在Chrome上对其进行实验性质的支持。
但同时SASS也是有几个比较严重的问题的</p>
<ol>
<li><p>基于Ruby </p>
<p>无法更有效的贴近目前实际的前端开发者，之前Sass的壮大主要是由于Rails这个一体化开发框架带来的效应，很多Web开发者承担着CSS的开发任务，而目前前端开发领域越来越复杂，更多的前端开发者有能力和需求去接受css预处理器。</p>
</li>
<li><p>语法有些冗杂</p>
<p>这个一方面是由于Sass悠久的 <strong>历史包袱</strong>引起的, 另一方面也是对功能缺乏取舍的后果。比较典型的例子就是难以捉摸的<code>@extend</code>规则和那些循环语法们</p>
</li>
</ol>
<p>从LESS、SASS的社区活跃度对比来看，这些年LESS要比SASS发展的要好得多，但是SASS比LESS在后续的扩展上要有更大的自由度——依赖自定义<code>@At-rule</code>，而这个在LESS中被占用成了变量声明，LESS只能在选择器上做文章了。</p>
<h3>2. <a href="http://lesscss.org/">LESS</a> —— 最火和最像CSS的预处理器</h3>
<p>目前版本的LESS是基于Nodejs构建，并且可以在浏览器中运行（在实际开发中请忘记这个功能），目前LESS在github上的start数达到了9000，作者遇到的同事用过预处理器的也几乎都是LESS的支持者。</p>
<p><strong>LESS的火的原因是什么?</strong></p>
<ol>
<li><p>拥有50000+ star数的 <strong>bootstrap</strong></p>
<p>有个大平台社区的推动，想不火都难啊。有多少人是因为bootstrap关注到LESS的？ 请举个手。反正我是的</p>
</li>
<li><p>最像CSS</p>
<p>这个像指的是词法上最接近，热爱LESS的人们忘记CSS对于<code>@atrule</code>的定义吧，因为LESS使用了这个词法对象作为参数了，成就了简洁的美誉但是却影响了后续的功能扩展。这同时也带来了其它好处，比如几乎不需要去写对应的语法高亮了，开启css的就行，并且更容易被前端开发所接受。</p>
</li>
<li><p>突出了最常用的80%的功能</p>
<p>众所周知，LESS晚于SASS除了语法上的不同，没有引入额外的功能，而是进行了精简，混合了<code>mixin</code>和<code>ruleset</code>虽然给后续扩展带来不足，但是确实是聪明的设计。</p>
</li>
</ol>
<p>但是事实上，大家似乎很少注意到这点 </p>
<blockquote>
<p>LESS目前仍然没有出现过一个类似Compass这种功能层级的二级类库</p>
</blockquote>
<p>LESS目前有了extend了， 似乎SASS党们无法再攻击它的这个劣势，在我看来LESS似乎是往错误的方向又走了一步，比如两个并列的Selector，你如何判断哪个是extend的？如何处理层级的extend？这些本就可以通过扩展@atrule进行解决，但是设计上走错了一步会导致后续的扩展</p>
<h3>3. <a href="http://learnboost.github.io/stylus/">Stylus</a> —— 让人眼前一亮的语法设计</h3>
<p>Stylus是Node社区的大神TJ的大作， 看似更少的语法噪音(括号, 冒号，分号)，通过缩进来解释, 事实上可能带来维护的深渊，多种语法支持看似灵活，其实在团队开发中也可能带来灾难。 </p>
<p>综上所述，对于以上三款，我偏向仍然是SASS(SCSS)。文章的末尾 </p>
<h3>4. <a href="https://github.com/NeteaseWD/mcss">MCSS</a></h3>
<p>从SASS出现，再到LESS(LESS在功能上只是子集), 再到Stylus, 语法特性整个社区其实一直在增加，但是无论它们任何一个，其实都没有解决或关注到一些一直存在的问题: </p>
<ol>
<li><p>无法控制一整个文件模块的输出</p>
</li>
<li><p>block不是一种值，无法传递进函数, 这让@keyframes、@media的封装成为不可能</p>
</li>
</ol>
<p>MCSS是我最近完成的CSS预处理器，它同时也可以作为一个 <strong>易用的CSS Parser</strong> , 在小范围已经使用了约两个月， 已经有了完善的测试已经文档， 目前的版本是<code>0.3.4</code> 这里不会事无巨细的介绍太多它的功能点。有兴趣的可以参考</p>
<hr>
<h2>CSS预处理器的共性</h2>
<p><em>共性是一种类似最佳实践的存在，被各个预处理器社区广泛接受和实现的特性。这里我会以Sass、Less、Mcss三种预处理器进行短暂介绍，以及帮助我们解决什么问题</em></p>
<h4>1. 参数、赋值</h4>
<p>参数是一种最基本的抽象, </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>
<span class="comment">//less</span>
@primary: <span class="comment">#ccc;</span>

<span class="comment">//scss</span>
<span class="variable">$primary</span>: <span class="comment">#ccc;</span>

<span class="comment">//mcss</span>
<span class="variable">$primary</span> = <span class="comment">#ccc;</span>
</pre></td></tr></table></figure>

<h2>CSS预处理的几个误区</h2>
<h2>CSS预处理的几个良好实践</h2>
<h3>1. 嵌套尽量不要超过三层</h3>
<p>有人可能会疑问: _使用嵌套层级不就是为了更好的表明</p>
<p>如果你发现你的源文件大范围的超过三层, 或许你应该重构你的html了</p>
<h3>2.</h3>
<h2>个人实际使用中的预处理器</h2>
<h2>相关资源</h2>
<ol>
<li><a href="http://www.vanseodesign.com/css/abstraction/">Why Abstraction Can Improve Your CSS</a></li>
<li><a href="http://chriseppstein.github.io/blog/2009/09/20/why-stylesheet-abstraction-matters/">why stylesheet abstraction matters</a></li>
<li><a href="http://dev.w3.org/csswg/css3-syntax/#parsing">CSS Syntax</a></li>
<li><a href="http://css-tricks.com/poll-results-popularity-of-css-preprocessors/">几个预处理器的流行度对比 2012数据</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/Syntax">来自mdn的CSS syntax中文解释 短小精悍</a></li>
<li><a href="http://css-tricks.com/musings-on-preprocessing/">musing on preprocessing</a></li>
</ol>
<h2>后续</h2>
<ol>
<li>后续我会仔细阐述mcss的语法以及功能特性以及这个特性所要解决的问题</li>
</ol>
]]></content>
    <category scheme="http://leeluolee.github.io/tags/mcss/" term="mcss"/>
    <category scheme="http://leeluolee.github.io/tags/css/" term="css"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[开始使用Hexo]]></title>
    <link href="http://leeluolee.github.io/2013/03/02/use-hexo/"/>
    <id>http://leeluolee.github.io/2013/03/02/use-hexo/</id>
    <published>2013-03-02T03:34:51.000Z</published>
    <updated>2013-08-08T05:35:12.000Z</updated>
    <content type="html"><![CDATA[<p>去年毕业后配置Otcopress完后就没用过了,反正不会去折腾Ruby，发现问题也不好解决，索性就换到<a href="http://zespia.tw/hexo/">Hexo</a>了, 文档很丰富, 没有累赘的功能部署很快, 简单记录下</p>
<a name="more"></a>

<h2>安装</h2>
<p>直接npm安装:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">npm</span> install hexo -g
<span class="title">cd</span>/ path/to/your/blog/root
<span class="title">hexo</span> init {your_site_name}
</pre></td></tr></table></figure>

<p>回忆下Otcopress在windows的安装简直不堪忍受, 数小时之久(当然我不熟悉Ruby这个生态圈也有关系)。</p>
<h2>配置</h2>
<p>主要是github的配置, 这里记得如果username.github.com这个仓库已经有了资源，要进行手动清理. 还有一个就是yaml里的deploy项要填写完整的Repository 地址(坑1), 如:</p>
<figure class="highlight lang-yaml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre># <span class="class">Deployment</span>
## <span class="class">Docs</span>: <span class="method">http:</span>//zespia.tw/hexo/docs/deploy.html
<span class="method">deploy:</span>
  <span class="method">type:</span> github
  <span class="method">repository:</span> <span class="method">https:</span>//github.com/leeluolee/leeluolee.github.com
  <span class="method">branch:</span> master
</pre></td></tr></table></figure>

<p>如果是项目的gh-pages, 则branch填gh-pages。完了之后如果还不行就进入<code>.deploy</code>目录手动添加一个名为<strong>github</strong> 的remote branch，例如
<code>git remote add github {你仓库名}</code></p>
<h2>书写</h2>
<p>hexo支持摘要断行 <code>&lt;!-- more --&gt;</code></p>
<h2>结尾</h2>
<p>Hexo是一个很精简的blog generator &amp;&amp; deploy, 完全满足技术人员日常的博客需求, 使用过Octopress的应该是完全没有学习成本, 本人是典型极简癖, 跟这个Hexo简直是一拍即合</p>
]]></content>
    <category scheme="http://leeluolee.github.io/tags/tool/" term="tool"/>
    <category scheme="http://leeluolee.github.io/tags/nodejs/" term="nodejs"/>
  </entry>
</feed>
